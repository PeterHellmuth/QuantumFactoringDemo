@page
@model QuantumFactoringDemo.Pages.IndexModel
@{
    ViewData["Title"] = "Quantum Factoring Demo";
    var semiprimes = ViewData["Semiprimes"] as List<int>;
}

<h2 class="mb-4">Quantum Factoring Demo</h2>

<form method="post">
    <div class="form-group">
        <label for="number">Enter a semiprime number to factor (4-9998). Examples: 57, 1465, 3314, 6227 </label>
        <input type="number" class="form-control" id="number" name="number" 
               required min="4" max="9998" oninput="validateSemiprime(this)" />
        <div class="invalid-feedback">
            Please enter a valid semiprime number within the range 4-9998.
        </div>
    </div>

    <script>
        const semiprimes = @Html.Raw(Json.Serialize(semiprimes));

        function validateSemiprime(input) {
            const value = parseInt(input.value, 10);

            if (semiprimes.includes(value)) {
                input.setCustomValidity('');
                input.classList.remove('is-invalid');
            } else {
                input.setCustomValidity('Invalid semiprime number');
                input.classList.add('is-invalid');
            }
        }
    </script>
    <button type="submit" class="btn btn-primary mt-3">Factor</button>
</form>

<div class="row mt-4">
    <div class="col-md-6 mb-4">
        <div class="card border-primary">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Quantum Results (Shor's Algorithm)</h5>
            </div>
            <div class="card-body">
                <p class="mb-1">Factors: @(Model.QuantumResult ?? "")</p>
                <p class="mb-0">Time: @(Model.QuantumTime > 0 ? Model.QuantumTime.ToString("E4") + " seconds" : "")</p>
            </div>
        </div>
    </div>

    <div class="col-md-6 mb-4">
        <div class="card border-secondary">
            <div class="card-header bg-secondary text-white">
                <h5 class="mb-0">Classical Results (Brute Force)</h5>
            </div>
            <div class="card-body">
                <p class="mb-1">Factors: @(Model.ClassicalResult ?? "")</p>
                <p class="mb-0">Time: @(Model.ClassicalTime > 0 ? Model.ClassicalTime.ToString("E4") + " seconds" : "")</p>
            </div>
        </div>
    </div>
</div>

<div class="mt-5">
    <h4 class="mb-4">Time Complexity Comparison (Log Scale)</h4>
    <div class="chart-container" style="position: relative; height:500px; width:100%">
        <canvas id="complexityChart"></canvas>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@2.0.1"></script>
    <script>
        // Static complexity chart with proper initialization
        const ctx = document.getElementById('complexityChart').getContext('2d');
        
        // Convert labels to numbers for correct axis scaling
        const labels = [128, 256, 512, 1024, 2048];
        
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Theoretical Quantum (O(n³))',
                        data: labels.map(n => Math.pow(n, 3)),
                        borderColor: '#4CAF50',
                        borderWidth: 2,
                        pointRadius: 4
                    },
                    {
                        label: 'Real Quantum (2021 Paper)',
                        data: [1.2e15, 9.8e16, 7.5e18, 6.1e20, 4.9e22],
                        borderColor: '#2196F3',
                        borderWidth: 2,
                        borderDash: [5,5],
                        pointRadius: 4
                    },
                    {
                        label: 'Classical GNFS (O(e^(1.9n^(1/3)))',
                        data: [1e30, 1e60, 1e120, 1e240, 1e480],
                        borderColor: '#F44336',
                        borderWidth: 2,
                        pointRadius: 4
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        type: 'logarithmic',
                        title: {
                            display: true,
                            text: 'Key Size (bits)'
                        },
                        min: 128,
                        max: 2048,
                        ticks: {
                            callback: function(value) {
                                return value + ' bits';
                            }
                        }
                    },
                    y: {
                        type: 'logarithmic',
                        title: { 
                            display: true, 
                            text: 'Operations Required (log scale)' 
                        },
                        min: 1e10,
                        max: 1e500,
                        ticks: {
                            callback: function(value) {
                                return '10^' + Math.log10(value).toFixed(0);
                            }
                        }
                    }
                },
                plugins: {
                    annotation: {
                        annotations: {
                            rsa2048: {
                                type: 'line',
                                xMin: 2048,
                                xMax: 2048,
                                borderColor: '#FF9800',
                                borderWidth: 2,
                                label: {
                                    content: ['20M physical qubits required', '(2021 Paper)'],
                                    position: 'end',
                                    backgroundColor: '#FF9800',
                                    color: 'white'
                                }
                            }
                        }
                    },
                    tooltip: {
                        mode: 'nearest',
                        callbacks: {
                            title: function(context) {
                                return context[0].label + ' bits';
                            },
                            label: function(context) {
                                return context.dataset.label + ': 10^' + 
                                    Math.log10(context.raw).toFixed(1) + ' ops';
                            },
                        }
                    }
                }
            }
        });
    </script>
}