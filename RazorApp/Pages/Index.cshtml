@page
@model QuantumFactoringDemo.Pages.IndexModel
@{
    ViewData["Title"] = "Quantum Factoring Demo";
}

<h2>Quantum Factoring Demo</h2>

<form method="post">
    <div class="form-group">
        <label for="number">Enter a number to factor:</label>
        <input type="number" class="form-control" id="number" name="number" required />
    </div>
    <button type="submit" class="btn btn-primary">Factor</button>
</form>

<div class="row mt-4">
    <div class="col-md-6 mb-4">
        <div class="card border-primary h-100">
            <div class="card-header bg-primary text-white">
                <h3 class="card-title mb-0">Quantum Results</h3>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(Model.QuantumResult))
                {
                    <div class="alert alert-success">
                        <p>Factors: @Model.QuantumResult</p>
                        <p class="mb-0">Time: @Model.QuantumTime seconds</p>
                    </div>
                }

                <h5 class="mt-3">Current Technology</h5>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">Infeasible</li>
                    <li class="list-group-item">~4M qubits needed</li>
                    <li class="list-group-item">1% error rate</li>
                </ul>

                <h5 class="mt-3">Future Projection</h5>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">~24 hours</li>
                    <li class="list-group-item">~20K qubits</li>
                    <li class="list-group-item">0.1% error rate</li>
                </ul>
            </div>
        </div>
    </div>

    <div class="col-md-6 mb-4">
        <div class="card border-secondary h-100">
            <div class="card-header bg-secondary text-white">
                <h3 class="card-title mb-0">Classical Results</h3>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(Model.ClassicalResult))
                {
                    <div class="alert alert-success">
                        <p>Factors: @Model.ClassicalResult</p>
                        <p class="mb-0">Time: @Model.ClassicalTime seconds</p>
                    </div>
                }

                <h5 class="mt-3">Current Technology</h5>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">~10³⁰ years (GNFS)</li>
                    <li class="list-group-item">Most efficient algorithm</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <canvas id="factoringChart"></canvas>
    </div>
</div>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Get canvas context
        const ctx = document.getElementById('factoringChart').getContext('2d');

        // Chart configuration
        const config = {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        label: 'Simulated Quantum',
                        data: [],
                        borderColor: 'rgb(75, 192, 192)',
                        borderWidth: 2,
                        pointRadius: 5
                    },
                    {
                        label: 'Classical',
                        data: [],
                        borderColor: 'rgb(255, 99, 132)',
                        borderWidth: 2,
                        pointRadius: 5
                    },
                    {
                        label: 'Theoretical Quantum (O(n³))',
                        data: [],
                        borderColor: 'rgba(75, 192, 192, 0.5)',
                        borderDash: [5, 5],
                        borderWidth: 1
                    },
                    {
                        label: 'Theoretical Classical (GNFS)',
                        data: [],
                        borderColor: 'rgba(255, 99, 132, 0.5)',
                        borderDash: [5, 5],
                        borderWidth: 1
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: (context) => {
                                const label = context.dataset.label || '';
                                const value = context.parsed.y.toExponential(2);
                                return `${label}: ${value} sec`;
                            }
                        }
                    }
                },
                interaction: {
                    mode: 'nearest',
                    intersect: false
                },
                scales: {
                    x: {
                        type: 'linear',
                        title: {
                            display: true,
                            text: 'Input Size (bits)'
                        }
                    },
                    y: {
                        type: 'logarithmic',
                        title: {
                            display: true,
                            text: 'Time (seconds)'
                        },
                        min: 1e-6,
                        max: 1e30
                    }
                }
            }
        };

        // Initialize chart
        const chart = new Chart(ctx, config);

        // Update chart with data
        @foreach (var point in Model.DataPoints)
        {
            <text>
            addDataPoint(
                @point.Bits,
                @point.SimulatedQuantumTime,
                @point.ClassicalTime,
                @point.TheoreticalQuantumTime,
                @point.TheoreticalClassicalTime
            );
            </text>
        }

        function addDataPoint(bits, simulatedQuantum, classical, theoryQuantum, theoryClassical) {
            // Add to labels only once per bits value
            if (!chart.data.labels.includes(bits)) {
                chart.data.labels.push(bits);
            }
            
            chart.data.datasets[0].data.push(simulatedQuantum);
            chart.data.datasets[1].data.push(classical);
            chart.data.datasets[2].data.push(theoryQuantum);
            chart.data.datasets[3].data.push(theoryClassical);
            
            chart.update();
        }
    </script>
}