@page
@model QuantumFactoringDemo.Pages.IndexModel
@{
    ViewData["Title"] = "Quantum Factoring Demo";
}

<h2>Quantum Factoring Demo</h2>

<form method="post">
    <div class="form-group">
        <label for="number">Enter a number to factor:</label>
        <input type="number" class="form-control" id="number" name="number" required />
    </div>
    <button type="submit" class="btn btn-primary">Factor</button>
</form>

<div class="row mt-4">
    <div class="col-md-6 mb-4">
        <div class="card border-primary h-100">
            <div class="card-header bg-primary text-white">
                <h3 class="card-title mb-0">Quantum Results</h3>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(Model.QuantumResult))
                {
                    <div class="alert alert-success">
                        <p>Factors: @Model.QuantumResult</p>
                        <p class="mb-0">Time: @Model.QuantumTime seconds</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="col-md-6 mb-4">
        <div class="card border-secondary h-100">
            <div class="card-header bg-secondary text-white">
                <h3 class="card-title mb-0">Classical Results</h3>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(Model.ClassicalResult))
                {
                    <div class="alert alert-success">
                        <p>Factors: @Model.ClassicalResult</p>
                        <p class="mb-0">Time: @Model.ClassicalTime seconds</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <canvas id="factoringChart"></canvas>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const ctx = document.getElementById('factoringChart').getContext('2d');
        
        // Initialize with empty data
        let chart = null;
        
        // Load existing data from localStorage
        let storedData = JSON.parse(localStorage.getItem('factoringData') || '{"labels":[],"datasets":[]}');

        // Chart configuration
        const config = {
            type: 'line',
            data: {
                labels: storedData.labels,
                datasets: [
                    {
                        label: 'Simulated Quantum (Actual)',
                        data: storedData.datasets[0]?.data || [],
                        borderColor: '#4CAF50', // Green
                        borderWidth: 3,
                        pointRadius: 6
                    },
                    {
                        label: 'Classical Brute Force (Actual)',
                        data: storedData.datasets[1]?.data || [],
                        borderColor: '#F44336', // Red
                        borderWidth: 3,
                        pointRadius: 6
                    },
                    {
                        label: 'Theoretical Quantum (O(n³))',
                        data: [],
                        borderColor: '#2196F3', // Blue
                        borderWidth: 2,
                        borderDash: [5, 5]
                    },
                    {
                        label: 'Theoretical Classical (O(2ⁿ))',
                        data: [],
                        borderColor: '#FF9800', // Orange
                        borderWidth: 2,
                        borderDash: [5, 5]
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: (context) => {
                                const label = context.dataset.label;
                                const value = context.parsed.y.toExponential(2);
                                return `${label}: ${value} sec`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        type: 'linear',
                        title: { 
                            display: true, 
                            text: 'Input Size (bits)',
                            font: { size: 14 }
                        },
                        min: 4,
                        max: 32 // Focus on 4-32 bits for demo
                    },
                    y: {
                        type: 'logarithmic',
                        title: { 
                            display: true, 
                            text: 'Time (seconds)',
                            font: { size: 14 }
                        },
                        min: 1e-6,
                        max: 100 // Show up to 100 seconds
                    }
                }
            }
        };

        // Initialize chart
        if (!chart) {
            chart = new Chart(ctx, config);
            addTheoreticalCurves(); // Add theoretical lines once
        }

        // Add theoretical complexity curves
        function addTheoreticalCurves() {
            const bitsRange = Array.from({length: 29}, (_, i) => i + 4); // 4-32 bits
            bitsRange.forEach(bits => {
                const n = Math.pow(2, bits);
                
                // Quantum: O((log N)³)
                const quantumTime = Math.pow(bits, 3);
                
                // Classical: O(2^(n/2)) for brute force
                const classicalTime = Math.pow(2, bits/2);
                
                chart.data.datasets[2].data.push(quantumTime);
                chart.data.datasets[3].data.push(classicalTime);
            });
            chart.update();
        }

        // Update chart with new data
        @foreach (var point in Model.DataPoints)
        {
            <text>
            addDataPoint(
                @point.Bits,
                @point.SimulatedQuantumTime,
                @point.ClassicalTime
            );
            </text>
        }

        function addDataPoint(bits, quantumTime, classicalTime) {
            // Prevent duplicates
            if (!chart.data.labels.includes(bits)) {
                chart.data.labels.push(bits);
            }
            
            chart.data.datasets[0].data.push(quantumTime);
            chart.data.datasets[1].data.push(classicalTime);
            
            // Save to localStorage
            localStorage.setItem('factoringData', JSON.stringify({
                labels: chart.data.labels,
                datasets: chart.data.datasets.map(d => ({data: d.data}))
            }));
            
            chart.update();
        }
    </script>
}